<?xml version="1.0" encoding="UTF-8"?>
<itop_design xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.6">
	<classes>
		<class id="NormalChange">
			<fields>
				<!-- Add third party org and ref -->
				<field id="third_party_org_id" xsi:type="AttributeExternalKey" _delta="define">
					<sql>third_party_org_id</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
					<on_target_delete>DEL_AUTO</on_target_delete>
					<target_class>Organization</target_class>
				</field>
				<field id="third_party_ref" xsi:type="AttributeString" _delta="define">
					<sql>third_party_ref</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>
			</fields>
			<lifecycle>
				<states>
					<state id="validated">
						<flags>
							<!-- Do not enforce entering acceptance_comment (can be left empty; but is still asked) -->
							<attribute id="acceptance_comment">
								<mandatory _delta="delete"/>
								<must_prompt _delta="merge"/>
							</attribute>
						</flags>
						<transitions>
							<!-- Allow transition to 'reject' even when already validated -->
							<transition id="ev_reject" _delta="define">
								<target>rejected</target>
								<actions/>
							</transition>
						</transitions>
					</state>
					<state id="assigned">
						<transitions>
							<!-- Allow transition to 'reject' even when already assigned -->
							<transition id="ev_reject" _delta="define">
								<target>rejected</target>
								<actions/>
							</transition>
						</transitions>
					</state>
					<state id="plannedscheduled">
						<flags>
							<!-- Prevent Change's impact (comment) from being mandatory -->
							<attribute id="impact">
								<mandatory _delta="delete"/>
							</attribute>
							<!-- Prevent Change's fallback from being mandatory -->
							<attribute id="fallback">
								<mandatory _delta="delete"/>
							</attribute>
						</flags>				
						<transitions>
							<!-- Allow transition to 'reject' even when already plannedscheduled -->
							<transition id="ev_reject" _delta="define">
								<target>rejected</target>
								<actions/>
							</transition>
						</transitions>
					</state>
					<state id="approved">
						<flags>
							<!-- Necessary to explicitly define for PrefillTransitionForm? -->
							<attribute id="approval_date">
								<must_prompt _delta="define"/>
							</attribute>
						</flags>
						<transitions>
							<!-- Allow transition to 'reject' even when already approved -->
							<transition id="ev_reject" _delta="define">
								<target>rejected</target>
								<actions/>
							</transition>
						</transitions>
					</state>
					<state id="notapproved">
						<transitions>
							<!-- Allow transition to 'reject' even when already notapproved -->
							<!-- notapproved is different because it simply rejects the approval, not the entire change, and goes back to plannedscheduled -->
							<transition id="ev_reject" _delta="define">
								<target>rejected</target>
								<actions/>
							</transition>
						</transitions>
					</state>
					<state id="implemented">
						<flags>
							<!-- Prevent NormalChange's title becoming read-only when the state changes to implemented. -->
							<attribute id="title">
								<read_only _delta="delete"/>
							</attribute>
						</flags>
					</state>
					<state id="closed">
						<flags>
							<!-- Prevent NormalChange's private_log becoming read-only when the state changes to closed. -->
							<attribute id="private_log">
								<read_only _delta="delete"/>
							</attribute>
						</flags>  
					</state>
				</states>
			</lifecycle>
			<presentation>
				<details>
					<items>                   
						<item id="col:col3">
							<rank>100</rank>
							<items>
								<item id="fieldset:Ticket:date">
									<rank>130</rank>
									<items>
										<item id="reminder" _delta="define">
											<rank>80</rank>
										</item>
									</items>
								</item>
								<item id="fieldset:NormalChange:ThirdParty" _delta="define">
									<rank>140</rank>
									<items>
										<item id="third_party_org_id">
											<rank>1</rank>
										</item>
										<item id="third_party_ref">
											<rank>11</rank>
										</item>
									</items>
								</item>
							</items>
						</item>
					</items>
				</details>
			</presentation>
			<methods>
				<method id="PrefillTransitionForm" _delta="define">
					<!-- Set approval date to today by default -->
					<static>false</static>
					<access>public</access>
					<type>Overload-DBObject</type>
					<arguments>
						<argument id="1">
							<type>reference</type>
							<mandatory>true</mandatory>
						</argument>
					</arguments>
					<code>
						<![CDATA[
						public function PrefillTransitionForm(&$aContextParam) {
						
							parent::PrefillTransitionForm($aContextParam);
						
							switch($aContextParam['stimulus']) {
								case 'ev_approve':
									$this->Set('approval_date', date('Y-m-d H:i:s'));
									break;
									
								case 'ev_validate':
									$this->Set('acceptance_date', date('Y-m-d H:i:s'));
									break;
									
							}
						
						}
						
						]]>
					</code>
				</method>
			</methods>
		</class>
		<class id="RoutineChange">
			<lifecycle>
				<states>
					<state id="assigned">
						<transitions>
							<!-- Allow transition to 'reject' even when already assigned -->
							<transition id="ev_reject" _delta="define">
								<target>rejected</target>
								<actions/>
							</transition>
						</transitions>
					</state>
					<state id="plannedscheduled">
						<flags>
							<!-- Prevent Change's impact (comment) from being mandatory -->
							<attribute id="impact">
								<mandatory _delta="delete"/>
							</attribute>
							<!-- Prevent Change's fallback from being mandatory -->
							<attribute id="fallback">
								<mandatory _delta="delete"/>
							</attribute>
						</flags>
						<transitions>
							<!-- Allow transition to 'reject' even when already plannedscheduled -->
							<transition id="ev_reject" _delta="define">
								<target>rejected</target>
								<actions/>
							</transition>
						</transitions>
					</state>
					<state id="approved">
						<flags>
							<!-- Prevent Change's fallback from being mandatory -->
							<attribute id="fallback">
								<mandatory _delta="delete"/>
							</attribute>
						</flags>
						<transitions>
							<!-- Allow transition to 'reject' even when already approved -->
							<transition id="ev_reject" _delta="define">
								<target>rejected</target>
								<actions/>
							</transition>
						</transitions>
					</state>
					<state id="notapproved">
						<transitions>
							<!-- Allow transition to 'reject' even when already notapproved -->
							<!-- notapproved is different because it simply rejects the approval, not the entire change, and goes back to planned_and_scheduled -->
							<transition id="ev_reject" _delta="define">
								<target>rejected</target>
								<actions/>
							</transition>
						</transitions>
					</state>
					<state id="implemented">
						<flags>
							<!-- Prevent RoutineChange's title becoming read-only when the state changes to implemented. -->
							<attribute id="title">
								<read_only _delta="delete"/>
							</attribute>
						</flags>
					</state>
					<state id="closed">
						<flags>
							<!-- Prevent RoutineChange's private_log becoming read-only when the state changes to closed. -->
							<attribute id="private_log">
								<read_only _delta="delete"/>
							</attribute>
						</flags>  
					</state>
				</states>
			</lifecycle>
		</class>
		<class id="EmergencyChange">
			<lifecycle>
				<states>
					<state id="plannedscheduled">
						<flags>
							<!-- Prevent Change's impact (comment) from being mandatory -->
							<attribute id="impact">
								<mandatory _delta="delete"/>
							</attribute>
						</flags>
					</state>
					<state id="approved">
						<flags>
							<!-- Prevent Change's approval_comment from being mandatory -->
							<attribute id="approval_comment">
								<mandatory _delta="delete"/>
								<must_prompt _delta="define">true</must_prompt>
							</attribute>
						</flags>
					</state>
					<state id="implemented">
						<flags>
							<!-- Prevent EmergencyChange's title becoming read-only when the state changes to implemented. -->
							<attribute id="title">
								<read_only _delta="redefine">false</read_only>
							</attribute>
						</flags>
					</state>
					<state id="closed">
						<flags>
							<!-- Prevent EmergencyChange's private_log becoming read-only when the state changes to closed. -->
							<attribute id="private_log">
								<read_only _delta="redefine">false</read_only>
							</attribute>
						</flags>
					</state>
				</states>
			</lifecycle>
		</class>
		<class id="Change">
			<fields>
				<!-- Set default value -->
				<field id="fallback" xsi:type="AttributeText">
					<default_value _delta="redefine">Restore backup</default_value>
				</field>
				<!-- Add reminder field -->
				<field id="reminder" xsi:type="AttributeDateTime" _delta="define">
					<sql>reminder</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>
			</fields>
			<methods>
				<!-- 
					Prevent automatically computed impacted items from being linked to this class.
					This does not modify the tab Impact Analysis, which will work exactly like before.
					
					There used to be modifications to the OnInsert() and OnUpdate() methods of a Change.
					However, there were also some other minor changes by Combodo in between iTop versions. 
					Nowadays it seems easier to give this class its own harmless UpdateImpactedItems() method.
					UpdateImpactedItems() is inherited from the Ticket class.
				-->
				<method id="UpdateImpactedItems" _delta="define">
					<static>false</static>
					<access>public</access>
					<type>Overload-DBObject</type>
					<code>
						<![CDATA[
						public function UpdateImpactedItems()
						{
							// Do nothing
						}]]>
					</code>
				</method>
			</methods>
			<lifecycle>
				<states>
					<state id="plannedscheduled">
						<flags>
							<!-- Prevent Change's impact (comment) from being mandatory -->
							<attribute id="impact">
								<mandatory _delta="delete"/>
							</attribute>
						</flags>
					</state>
					<state id="notapproved">
						<flags>
							<!-- Prevent Change's fallback from being mandatory -->
							<attribute id="fallback">
								<mandatory _delta="delete"/>
							</attribute>
						</flags>
					</state>
					<state id="implemented">
						<flags>
							<!-- Prevent Change's fallback from being mandatory -->
							<attribute id="fallback">
								<mandatory _delta="delete"/>
							</attribute>
						</flags>
					</state>
				</states>
			</lifecycle>
		</class>
		<class id="ApprovedChange">
			<lifecycle>
				<states>
					<state id="plannedscheduled">
						<flags>
							<!-- Prevent Change's fallback from being mandatory -->
							<attribute id="fallback">
								<mandatory _delta="delete"/>
							</attribute>
						</flags>
					</state>
					<state id="approved">
						<flags>
							<!-- Prevent Change's approval_comment from being mandatory -->
							<attribute id="approval_comment">
								<mandatory _delta="delete"/>
								<must_prompt _delta="define">true</must_prompt>
							</attribute>
						</flags>
					</state>
				</states>
			</lifecycle>
		</class>
	</classes>
</itop_design>
